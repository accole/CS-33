Adam Cole

Answers:

(1):
	The following instruction causes an overflow, causing the bits to
wrap around and create an incorrect result.  We know overflow occurs since
the answer is positive, but 1250284240 * -1844255039 should be negative.

54e014	lea 0x2(,%rbp,4),%rax	rax=M8[0xdfffffff3ab3800]=0x7fffffff73ab3b42


(2):
	Print most-negative-fixnum outputs -2305843009213693952 because that
is how most-negative-fixnum is defined in the emacs source code.  In order to
find this, I keyword search most-positive fixnum in bits.c and the code states
most-negative-fixnum is the smallest value that is representable in a Lisp
integer.  Then, I keyword search MOST_NEGATIVE_FIXNUM in Lisp.h.  MOST_NEG
ATIVE_FIXNUM is defined as (-1 - MOST_POSITIVE_FIXNUM).  The line above that
defines INT_MAX >> INTTYPEBITS as MOST_POSITIVE_FIXNUM.  Keyword searching
INTTYPEBITS = GCTYPEBITS - 1.  Keyword searching GCTYPEBITS yields that it
equals 3.  Therefore, INTTYPEBITS = 2.  Therefore, MOST_POSITIVE_FIXNUM equals
INT_MAX >> 2 = 0001 1111 1111 1111 1111 1111 1111 1111 = 2305843009213693951.  
Therefore, MOST_NEGATIVE_FIXNUM = -2305843009213693951 - 1.

(3):
	(from 2) MOST_POSITIVE_FIXNUM = 0x1FFFFFFF, therefore when we multiply
0x1FFFFFFF * 0x1FFFFFFF * 0x1FFFFFFF * 0x1FFFFFFF = something close to 
1100000000000000000000000...00000000001, so after the overflow is accounted for
and the binary value is converted to a 64-bit representation, it will always
return 0x1, = 1.

(4):
	If this program was compiled with -fwrapv, the program would allow
overflow by wrapping around.  This optimization will still not return the 
correct result because the bits will still overflow and wrap around, but no
errors will appear.
